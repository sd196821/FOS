<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\RTC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\RTC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Oct 27 14:37:17 2015
<BR><P>
<H3>Maximum Stack Usage =        664 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
test_activation_ack_cmd_callback(ProHeader*) &rArr; Pro_Config_Comm_Encrypt_Key(const char*) &rArr; sdk_set_encrypt_key_interface(const char*) &rArr; sdk_comm_set_key(SDKFilter*, const char*) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[13]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[17]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SVC_Handler</a><BR>
 <LI><a href="#[18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DebugMon_Handler</a><BR>
 <LI><a href="#[19]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">PendSV_Handler</a><BR>
 <LI><a href="#[2d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6a]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[69]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6c]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6b]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[66]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[68]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[67]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from littletask.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6e]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[1d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[62]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[72]">CmdRecvThread()</a> from dji_pro_app.o(.text) referenced from main.o(.text)
 <LI><a href="#[73]">spin_callback()</a> from dji_pro_test.o(.text) referenced from main.o(.text)
 <LI><a href="#[12f]">cmd_callback_fun(unsigned short*)</a> from dji_pro_test.o(.text) referenced 2 times from dji_pro_test.o(.text)
 <LI><a href="#[8f]">testStateMachine()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[71]">App_Recv_Req_Data(ProHeader*)</a> from dji_pro_app.o(.text) referenced from main.o(.text)
 <LI><a href="#[120]">Test_ACK_Callback(ProHeader*)</a> from dji_pro_link.o(.text) referenced from dji_pro_link.o(.text)
 <LI><a href="#[1]">Pro_Link_Recv_Hook(ProHeader*)</a> from dji_pro_link.o(.text) referenced 2 times from dji_pro_codec.o(.data)
 <LI><a href="#[fb]">aes256_decrypt_ecb(tagAES256Context*, unsigned char*)</a> from dji_pro_codec.o(.text) referenced 2 times from dji_pro_codec.o(.text)
 <LI><a href="#[f6]">aes256_encrypt_ecb(tagAES256Context*, unsigned char*)</a> from dji_pro_codec.o(.text) referenced from dji_pro_codec.o(.text)
 <LI><a href="#[ef]">sdk_ack_cmd_callback(ProHeader*)</a> from dji_pro_app.o(.text) referenced from dji_pro_app.o(.text)
 <LI><a href="#[2]">sdk_std_msgs_handler(unsigned char, unsigned char*, unsigned short, req_id_t)</a> from dji_pro_test.o(.text) referenced 2 times from dji_pro_test.o(.data)
 <LI><a href="#[129]">cmd_callback_test_fun(unsigned short*)</a> from dji_pro_test.o(.text) referenced from dji_pro_test.o(.text)
 <LI><a href="#[3]">nav_force_close_handler(unsigned char, unsigned char*, unsigned short, req_id_t)</a> from dji_pro_test.o(.text) referenced 2 times from dji_pro_test.o(.data)
 <LI><a href="#[12c]">random_test_ack_cmd_callback(ProHeader*)</a> from dji_pro_test.o(.text) referenced from dji_pro_test.o(.text)
 <LI><a href="#[136]">sdk_ack_nav_open_close_callback(ProHeader*)</a> from dji_pro_test.o(.text) referenced from dji_pro_test.o(.text)
 <LI><a href="#[131]">test_activation_ack_cmd_callback(ProHeader*)</a> from dji_pro_test.o(.text) referenced from dji_pro_test.o(.text)
 <LI><a href="#[133]">test_version_query_ack_cmd_callback(ProHeader*)</a> from dji_pro_test.o(.text) referenced from dji_pro_test.o(.text)
 <LI><a href="#[89]">ctrl()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[7f]">toCVTask()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[70]">Send_Poll()</a> from dji_pro_link.o(.text) referenced from main.o(.text)
 <LI><a href="#[10]">Logic::trackBasket(int)</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a]">Logic::moveToCentre(int)</a> from logic.o(.text) referenced 4 times from logic.o(.data)
 <LI><a href="#[d]">Logic::stop(int)</a> from logic.o(.text) referenced 26 times from logic.o(.data)
 <LI><a href="#[e]">Logic::angle(int)</a> from logic.o(.text) referenced 10 times from logic.o(.data)
 <LI><a href="#[5]">Logic::delay(int)</a> from logic.o(.text) referenced 50 times from logic.o(.data)
 <LI><a href="#[c]">Logic::moveX(int)</a> from logic.o(.text) referenced 14 times from logic.o(.data)
 <LI><a href="#[f]">Logic::moveY(int)</a> from logic.o(.text) referenced 4 times from logic.o(.data)
 <LI><a href="#[7]">Logic::landIn(int)</a> from logic.o(.text) referenced 6 times from logic.o(.data)
 <LI><a href="#[4]">Logic::takeOff(int)</a> from logic.o(.text) referenced 6 times from logic.o(.data)
 <LI><a href="#[8]">Logic::dropBall(int)</a> from logic.o(.text) referenced 30 times from logic.o(.data)
 <LI><a href="#[b]">Logic::stopMove(int)</a> from logic.o(.text) referenced 4 times from logic.o(.data)
 <LI><a href="#[9]">Logic::takeBall(int)</a> from logic.o(.text) referenced 8 times from logic.o(.data)
 <LI><a href="#[6]">Logic::toHeight(int)</a> from logic.o(.text) referenced 6 times from logic.o(.data)
 <LI><a href="#[6f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[79]">__sti___8_main_cpp_DJI</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[75]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[76]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[74]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[78]">fputc</a> from cppforstm32.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[77]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6d]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[197]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[186]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[198]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7d]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[199]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[19a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[19b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[19c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[19d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>toCVTask()</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = toCVTask() &rArr; FlightControl::decode(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::getRx() const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskList::init()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::read(unsigned char&)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::takeoff()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::decode(unsigned char)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::hasball()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Landing()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::operator &lang;&lang;(char*) const
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>ctrl()</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ctrl() &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskList::pollTask()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::offSet()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>testStateMachine()</STRONG> (Thumb, 938 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = testStateMachine() &rArr; DJI_Onboard_API_Activation() &rArr; test_activation() &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::getRx() const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskList::init()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::read(unsigned char&)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::takeoff()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Activation()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Landing()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Control(unsigned char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>main</STRONG> (Thumb, 306 bytes, Stack size 232 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = main &rArr; DJI_Onboard_API_Activation() &rArr; test_activation() &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::print(unsigned char) const
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::init()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::mechanical()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::init()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LittleTask::LittleTask(void(*)(), unsigned, unsigned, int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LittleTask::pollTasks()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LittleTask::init()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Pro_Hw::DJI_Pro_Hw()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Pro_Hw::run()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Activation()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Recv_Set_Hook(void(*)(ProHeader*))
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Link_Setup()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Set_Table(_set_tab*, _cmd_tab*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a2]"></a>ECHO_TO_DEBUG_IRQ</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::print(unsigned char) const
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::getRx() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::read(unsigned char&)
</UL>

<P><STRONG><a name="[a3]"></a>ECHO_TO_UPPER_IRQ</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::print(unsigned char) const
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::getRx() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::read(unsigned char&)
</UL>

<P><STRONG><a name="[a4]"></a>ECHO_TO_DJIPORT_IRQ</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::print(unsigned char) const
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::getRx() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::read(unsigned char&)
</UL>

<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, littletask.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>LittleTask::LittleTask(void(*)(), unsigned, unsigned, int)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, littletask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LittleTask::LittleTask(void(*)(), unsigned, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>LittleTask::LittleTask__sub_object(void(*)(), unsigned, unsigned, int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, littletask.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>LittleTask::init()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, littletask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>LittleTask::pollTasks()</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, littletask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LittleTask::pollTasks()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, servo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char) &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::mechanical()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::init()
</UL>

<P><STRONG><a name="[19f]"></a>Servo::Servo__sub_object(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, servo.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>Servo::convert(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, servo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::setpos(unsigned)
</UL>

<P><STRONG><a name="[b6]"></a>Servo::setpos(unsigned)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, servo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Servo::setpos(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::convert(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::init()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::drop(int)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::stop()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::out()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::back()
</UL>

<P><STRONG><a name="[82]"></a>USART::Buffer::read(unsigned char&)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Pro_Hw::run()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_TO_DJIPORT_IRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_TO_UPPER_IRQ
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_TO_DEBUG_IRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toCVTask()
</UL>

<P><STRONG><a name="[bd]"></a>USART::Buffer::length()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::flush(int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::readMultible(void*, unsigned)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
</UL>

<P><STRONG><a name="[bc]"></a>USART::Buffer::write(unsigned char&)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::print(unsigned char) const
</UL>

<P><STRONG><a name="[b8]"></a>USART::usart::defaultIRQHandler(USART::usart*)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART::usart::defaultIRQHandler(USART::usart*) &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::write(unsigned char&)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::length()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::read(unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_IRQHandler &rArr; USART::usart::defaultIRQHandler(USART::usart*) &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART2_IRQHandler &rArr; USART::usart::defaultIRQHandler(USART::usart*) &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART3_IRQHandler &rArr; USART::usart::defaultIRQHandler(USART::usart*) &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART4_IRQHandler &rArr; USART::usart::defaultIRQHandler(USART::usart*) &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>USART::Buffer::init(unsigned char*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::Buffer(unsigned)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::Buffer(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[c0]"></a>USART::Buffer::Buffer(unsigned char*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::init(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1a0]"></a>USART::Buffer::Buffer__sub_object(unsigned char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>USART::Buffer::Buffer(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART::Buffer::Buffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::init(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::usart(USART::usartPort, unsigned, unsigned, USART_InitTypeDef*)
</UL>

<P><STRONG><a name="[1a1]"></a>USART::Buffer::Buffer__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>USART::Buffer::writeMultible(unsigned char*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>USART::Buffer::readMultible(void*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::length()
</UL>

<P><STRONG><a name="[1a3]"></a>USART::Buffer::isEmpty()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>USART::Buffer::isFull()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>USART::Buffer::recallRead()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>USART::Buffer::flush(int)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::length()
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::flush(unsigned)
</UL>

<P><STRONG><a name="[c6]"></a>USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::usart(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::usart(USART::usartPort, unsigned, unsigned, USART_InitTypeDef*)
</UL>

<P><STRONG><a name="[a5]"></a>USART::usart::usart(USART::usartPort, unsigned, unsigned, USART_InitTypeDef*)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART::usart::usart(USART::usartPort, unsigned, unsigned, USART_InitTypeDef*) &rArr; USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::Buffer(unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_DJI
</UL>

<P><STRONG><a name="[1a6]"></a>USART::usart::usart__sub_object(USART::usartPort, unsigned, unsigned, USART_InitTypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>USART::usart::usart(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
</UL>

<P><STRONG><a name="[1a7]"></a>USART::usart::usart__sub_object(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>USART::usart::flush(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::flush(int)
</UL>

<P><STRONG><a name="[98]"></a>USART::usart::print(unsigned char) const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART::usart::print(unsigned char) const &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::write(unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printch(char) const
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_TO_DJIPORT_IRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_TO_UPPER_IRQ
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_TO_DEBUG_IRQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Pro_Hw::Pro_Hw_Send(unsigned char*, int)
</UL>

<P><STRONG><a name="[d1]"></a>USART::usart::printch(char) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART::usart::printch(char) const &rArr; USART::usart::print(unsigned char) const &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::print(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printhex(unsigned) const
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printbin(int) const
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printflt(double) const
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printdecSigned(int) const
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printdec(unsigned) const
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printstr(char*) const
</UL>

<P><STRONG><a name="[d2]"></a>USART::usart::printdec(unsigned) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printdec(unsigned) const
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printch(char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printflt(double) const
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printdecSigned(int) const
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printdec(unsigned) const
</UL>

<P><STRONG><a name="[d3]"></a>USART::usart::printdecSigned(int) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printdec(unsigned) const
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printch(char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printflt(double) const
</UL>

<P><STRONG><a name="[d4]"></a>USART::usart::printflt(double) const</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printdecSigned(int) const
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printdec(unsigned) const
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printch(char) const
</UL>

<P><STRONG><a name="[da]"></a>USART::usart::printstr(char*) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART::usart::printstr(char*) const &rArr; USART::usart::printch(char) const &rArr; USART::usart::print(unsigned char) const &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printch(char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printhex(unsigned) const
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printbin(int) const
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::operator &lang;&lang;(char*) const
</UL>

<P><STRONG><a name="[db]"></a>USART::usart::printbin(int) const</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printbin(int) const
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printch(char) const
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printstr(char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printbin(int) const
</UL>

<P><STRONG><a name="[dc]"></a>USART::usart::printhex(unsigned) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printhex(unsigned) const
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printch(char) const
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printstr(char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printhex(unsigned) const
</UL>

<P><STRONG><a name="[81]"></a>USART::usart::getRx() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Pro_Hw::run()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_TO_DJIPORT_IRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_TO_UPPER_IRQ
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_TO_DEBUG_IRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toCVTask()
</UL>

<P><STRONG><a name="[1a8]"></a>USART::usart::getTx() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>USART::usart::setIRQRunPoint(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>operator new(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cppforstm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::usart(USART::usartPort, unsigned, unsigned, USART_InitTypeDef*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_DJI
</UL>

<P><STRONG><a name="[c3]"></a>operator new[] (unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cppforstm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::Buffer(unsigned)
</UL>

<P><STRONG><a name="[de]"></a>operator delete (void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cppforstm32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[e0]"></a>operator delete[] (void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cppforstm32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[78]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cppforstm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; USART::usart::print(unsigned char) const &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::print(unsigned char) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[e1]"></a>GetKey</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cppforstm32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::getRx() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::read(unsigned char&)
</UL>

<P><STRONG><a name="[93]"></a>mechanical::mechanical()</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, mechanical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mechanical::mechanical() &rArr; Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char) &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_DJI
</UL>

<P><STRONG><a name="[1aa]"></a>mechanical::mechanical__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, mechanical.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>mechanical::init()</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, mechanical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mechanical::init() &rArr; Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char) &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::setpos(unsigned)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>mechanical::test(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mechanical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mechanical::test(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::hasball()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::atEnd()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::out()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::back()
</UL>

<P><STRONG><a name="[e4]"></a>mechanical::back()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mechanical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mechanical::back() &rArr; Servo::setpos(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::setpos(unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::test(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::moveToCentre(int)
</UL>

<P><STRONG><a name="[e5]"></a>mechanical::out()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mechanical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mechanical::out() &rArr; Servo::setpos(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::setpos(unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::test(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::takeBall(int)
</UL>

<P><STRONG><a name="[e6]"></a>mechanical::stop()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mechanical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mechanical::stop() &rArr; Servo::setpos(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::setpos(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::stopMove(int)
</UL>

<P><STRONG><a name="[e7]"></a>mechanical::atEnd()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mechanical.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::test(unsigned short)
</UL>

<P><STRONG><a name="[e8]"></a>mechanical::drop(int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mechanical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mechanical::drop(int) &rArr; Servo::setpos(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::setpos(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::dropBall(int)
</UL>

<P><STRONG><a name="[88]"></a>mechanical::hasball()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mechanical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mechanical::hasball() &rArr; mechanical::test(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::test(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toCVTask()
</UL>

<P><STRONG><a name="[eb]"></a>find_set_index(unsigned char, _set_tab*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dji_pro_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Recv_Req_Data(ProHeader*)
</UL>

<P><STRONG><a name="[ec]"></a>find_cmd_index(unsigned char, _cmd_tab*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dji_pro_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Recv_Req_Data(ProHeader*)
</UL>

<P><STRONG><a name="[9e]"></a>App_Set_Table(_set_tab*, _cmd_tab*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_pro_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, dji_pro_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Send_Interface(ProSendParameter*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Control(unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRecvThread()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_ctrl_data_callback(float, float, float, float)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_version_query()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_activation()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test_cmd(bool&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_mode4(bool&)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_mode2(bool&)
</UL>

<P><STRONG><a name="[71]"></a>App_Recv_Req_Data(ProHeader*)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, dji_pro_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = App_Recv_Req_Data(ProHeader*) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_index(unsigned char, _cmd_tab*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_set_index(unsigned char, _set_tab*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>App_Send_Ack(req_id_t, unsigned char*, int)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dji_pro_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = App_Send_Ack(req_id_t, unsigned char*, int) &rArr; Pro_Ack_Interface(ProAckParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Ack_Interface(ProAckParameter*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
</UL>

<P><STRONG><a name="[ef]"></a>sdk_ack_cmd_callback(ProHeader*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dji_pro_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdk_ack_cmd_callback(ProHeader*) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_app.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>is_sys_error(unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dji_pro_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_sys_error(unsigned short) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRecvThread()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_activation_ack_cmd_callback(ProHeader*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_callback_fun(unsigned short*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test_ack_cmd_callback(ProHeader*)
</UL>

<P><STRONG><a name="[72]"></a>CmdRecvThread()</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, dji_pro_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = CmdRecvThread() &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sys_error(unsigned short)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>App_Complex_Send_Cmd(unsigned char, void(*)(unsigned short*))</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dji_pro_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_cmd_data_callback(unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all(bool&)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_cmd(bool&)
</UL>

<P><STRONG><a name="[f2]"></a>rj_xtime(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mixColumns_inv(unsigned char*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mixColumns(unsigned char*)
</UL>

<P><STRONG><a name="[f8]"></a>aes_subBytes(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[fd]"></a>aes_subBytes_inv(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[fa]"></a>aes_addRoundKey(unsigned char*, unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_addRoundKey(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[f7]"></a>aes_addRoundKey_cpy(unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_addRoundKey_cpy(unsigned char*, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[f9]"></a>aes_shiftRows(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[fc]"></a>aes_shiftRows_inv(unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[f1]"></a>aes_mixColumns(unsigned char*)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aes_mixColumns(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rj_xtime(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[f3]"></a>aes_mixColumns_inv(unsigned char*)</STRONG> (Thumb, 166 bytes, Stack size 36 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aes_mixColumns_inv(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rj_xtime(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[f5]"></a>aes_expandEncKey(unsigned char*, unsigned char*)</STRONG> (Thumb, 200 bytes, Stack size 12 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_encrypt_ecb(tagAES256Context*, unsigned char*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_init(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[fe]"></a>aes_expandDecKey(unsigned char*, unsigned char*)</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_expandDecKey(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_decrypt_ecb(tagAES256Context*, unsigned char*)
</UL>

<P><STRONG><a name="[f4]"></a>aes256_init(tagAES256Context*, unsigned char*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*))
</UL>

<P><STRONG><a name="[107]"></a>aes256_done(tagAES256Context*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*))
</UL>

<P><STRONG><a name="[f6]"></a>aes256_encrypt_ecb(tagAES256Context*, unsigned char*)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aes256_encrypt_ecb(tagAES256Context*, unsigned char*) &rArr; aes_mixColumns(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_expandEncKey(unsigned char*, unsigned char*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mixColumns(unsigned char*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_shiftRows(unsigned char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_addRoundKey_cpy(unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_addRoundKey(unsigned char*, unsigned char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_subBytes(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_codec.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>aes256_decrypt_ecb(tagAES256Context*, unsigned char*)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = aes256_decrypt_ecb(tagAES256Context*, unsigned char*) &rArr; aes_mixColumns_inv(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_expandDecKey(unsigned char*, unsigned char*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mixColumns_inv(unsigned char*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_shiftRows_inv(unsigned char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_addRoundKey_cpy(unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_addRoundKey(unsigned char*, unsigned char*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_subBytes_inv(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_codec.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>crc16_update(unsigned short, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc16_calc(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[102]"></a>crc32_update(unsigned, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc32_calc(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[ff]"></a>sdk_stream_crc16_calc(const unsigned char*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sdk_stream_crc16_calc(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_update(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_recalc_crc(void*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_verify_head(SDKFilter*)
</UL>

<P><STRONG><a name="[101]"></a>sdk_stream_crc32_calc(const unsigned char*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sdk_stream_crc32_calc(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_update(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_recalc_crc(void*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_verify_data(SDKFilter*)
</UL>

<P><STRONG><a name="[1ab]"></a>sdk_serial_set_hook(void(*)(SDKHeader*))</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_pro_codec.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>sdk_stream_prepare(SDKFilter*, SDKHeader*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_stream_prepare(SDKFilter*, SDKHeader*) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_call_data_app(SDKFilter*)
</UL>

<P><STRONG><a name="[106]"></a>sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*))</STRONG> (Thumb, 118 bytes, Stack size 128 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_done(tagAES256Context*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes256_init(tagAES256Context*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_call_data_app(SDKFilter*)
</UL>

<P><STRONG><a name="[108]"></a>sdk_call_data_app(SDKFilter*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sdk_call_data_app(SDKFilter*) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*))
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_prepare(SDKFilter*, SDKHeader*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_verify_head(SDKFilter*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_verify_data(SDKFilter*)
</UL>

<P><STRONG><a name="[109]"></a>sdk_stream_shift_data(SDKFilter*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdk_stream_shift_data(SDKFilter*) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_verify_head(SDKFilter*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_update_reuse_part(SDKFilter*)
</UL>

<P><STRONG><a name="[10a]"></a>sdk_stream_store_data(SDKFilter*, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdk_stream_store_data(SDKFilter*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_byte_stream_handler(SDKFilter*, unsigned char)
</UL>

<P><STRONG><a name="[10b]"></a>sdk_stream_update_reuse_part(SDKFilter*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_stream_update_reuse_part(SDKFilter*) &rArr; sdk_stream_shift_data(SDKFilter*) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_shift_data(SDKFilter*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_verify_data(SDKFilter*)
</UL>

<P><STRONG><a name="[10c]"></a>sdk_stream_verify_data(SDKFilter*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = sdk_stream_verify_data(SDKFilter*) &rArr; sdk_call_data_app(SDKFilter*) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_update_reuse_part(SDKFilter*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_call_data_app(SDKFilter*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc32_calc(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_check_stream_state(SDKFilter*)
</UL>

<P><STRONG><a name="[10d]"></a>sdk_stream_verify_head(SDKFilter*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sdk_stream_verify_head(SDKFilter*) &rArr; sdk_call_data_app(SDKFilter*) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_shift_data(SDKFilter*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_call_data_app(SDKFilter*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc16_calc(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_check_stream_state(SDKFilter*)
</UL>

<P><STRONG><a name="[10e]"></a>sdk_check_stream_state(SDKFilter*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sdk_check_stream_state(SDKFilter*) &rArr; sdk_stream_verify_head(SDKFilter*) &rArr; sdk_call_data_app(SDKFilter*) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_verify_head(SDKFilter*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_verify_data(SDKFilter*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_byte_stream_handler(SDKFilter*, unsigned char)
</UL>

<P><STRONG><a name="[10f]"></a>sdk_byte_stream_handler(SDKFilter*, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sdk_byte_stream_handler(SDKFilter*, unsigned char) &rArr; sdk_check_stream_state(SDKFilter*) &rArr; sdk_stream_verify_head(SDKFilter*) &rArr; sdk_call_data_app(SDKFilter*) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_check_stream_state(SDKFilter*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_store_data(SDKFilter*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_serial_byte_handle(unsigned char)
</UL>

<P><STRONG><a name="[110]"></a>sdk_serial_byte_handle(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = sdk_serial_byte_handle(unsigned char) &rArr; sdk_byte_stream_handler(SDKFilter*, unsigned char) &rArr; sdk_check_stream_state(SDKFilter*) &rArr; sdk_stream_verify_head(SDKFilter*) &rArr; sdk_call_data_app(SDKFilter*) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_byte_stream_handler(SDKFilter*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Pro_Hw::run()
</UL>

<P><STRONG><a name="[111]"></a>sdk_stream_recalc_crc(void*)</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_stream_recalc_crc(void*) &rArr; sdk_stream_crc32_calc(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc32_calc(const unsigned char*, unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_crc16_calc(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[112]"></a>sdk_comm_set_key(SDKFilter*, const char*)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sdk_comm_set_key(SDKFilter*, const char*) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_set_encrypt_key_interface(const char*)
</UL>

<P><STRONG><a name="[114]"></a>sdk_set_encrypt_key_interface(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sdk_set_encrypt_key_interface(const char*) &rArr; sdk_comm_set_key(SDKFilter*, const char*) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_comm_set_key(SDKFilter*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Pro_Link()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Config_Comm_Encrypt_Key(const char*)
</UL>

<P><STRONG><a name="[115]"></a>sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dji_pro_codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_recalc_crc(void*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*))
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Send_Interface(ProSendParameter*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Ack_Interface(ProAckParameter*)
</UL>

<P><STRONG><a name="[9a]"></a>DJI_Pro_Hw::DJI_Pro_Hw()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_pro_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac]"></a>DJI_Pro_Hw::DJI_Pro_Hw__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dji_pro_hw.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>DJI_Pro_Hw::Pro_Hw_Send(unsigned char*, int)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dji_pro_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DJI_Pro_Hw::Pro_Hw_Send(unsigned char*, int) &rArr; USART::usart::print(unsigned char) const &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::print(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pro_Data(unsigned char*)
</UL>

<P><STRONG><a name="[a1]"></a>DJI_Pro_Hw::run()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dji_pro_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DJI_Pro_Hw::run() &rArr; sdk_serial_byte_handle(unsigned char) &rArr; sdk_byte_stream_handler(SDKFilter*, unsigned char) &rArr; sdk_check_stream_state(SDKFilter*) &rArr; sdk_stream_verify_head(SDKFilter*) &rArr; sdk_call_data_app(SDKFilter*) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::getRx() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Buffer::read(unsigned char&)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_serial_byte_handle(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>Pro_Request_Interface(ProHeader*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_pro_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Link_Recv_Hook(ProHeader*)
</UL>

<P><STRONG><a name="[119]"></a>Search_Ack_Session(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dji_pro_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Link_Recv_Hook(ProHeader*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Ack_Interface(ProAckParameter*)
</UL>

<P><STRONG><a name="[118]"></a>Free_Send_MMU(Memory_Manage_Unit*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dji_pro_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_Send_Session(Session_Queue*)
</UL>

<P><STRONG><a name="[117]"></a>Free_Send_Session(Session_Queue*)</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Free_Send_Session(Session_Queue*)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_Send_MMU(Memory_Manage_Unit*)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Poll()
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Link_Recv_Hook(ProHeader*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Send_Interface(ProSendParameter*)
</UL>

<P><STRONG><a name="[1]"></a>Pro_Link_Recv_Hook(ProHeader*)</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Pro_Link_Recv_Hook(ProHeader*) &rArr; Send_Pro_Data(unsigned char*) &rArr; DJI_Pro_Hw::Pro_Hw_Send(unsigned char*, int) &rArr; USART::usart::print(unsigned char) const &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_Send_Session(Session_Queue*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Ack_Session(unsigned char)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Request_Interface(ProHeader*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pro_Data(unsigned char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_codec.o(.data)
</UL>
<P><STRONG><a name="[1ad]"></a>Get_TimeStamp()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_pro_link.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>Send_Poll()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Send_Poll() &rArr; Send_Pro_Data(unsigned char*) &rArr; DJI_Pro_Hw::Pro_Hw_Send(unsigned char*, int) &rArr; USART::usart::print(unsigned char) const &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_Send_Session(Session_Queue*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pro_Data(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>Request_Send_MMU(unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Request_Send_MMU(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Send_Session(unsigned short)
</UL>

<P><STRONG><a name="[11f]"></a>Request_Ack_MMU(unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Request_Ack_MMU(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Ack_Interface(ProAckParameter*)
</UL>

<P><STRONG><a name="[11c]"></a>Request_Send_Session(unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Request_Send_Session(unsigned short) &rArr; Request_Send_MMU(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Send_MMU(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Send_Interface(ProSendParameter*)
</UL>

<P><STRONG><a name="[9c]"></a>Pro_Link_Setup()</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Pro_Link_Setup()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>Pro_Config_Comm_Encrypt_Key(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Pro_Config_Comm_Encrypt_Key(const char*) &rArr; sdk_set_encrypt_key_interface(const char*) &rArr; sdk_comm_set_key(SDKFilter*, const char*) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_set_encrypt_key_interface(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_activation_ack_cmd_callback(ProHeader*)
</UL>

<P><STRONG><a name="[ee]"></a>Pro_Ack_Interface(ProAckParameter*)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Pro_Ack_Interface(ProAckParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Ack_MMU(unsigned short)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Ack_Session(unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pro_Data(unsigned char*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Ack(req_id_t, unsigned char*, int)
</UL>

<P><STRONG><a name="[ea]"></a>Pro_Send_Interface(ProSendParameter*)</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Send_Session(unsigned short)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_Send_Session(Session_Queue*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pro_Data(unsigned char*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Pro_Link()
</UL>

<P><STRONG><a name="[9d]"></a>App_Recv_Set_Hook(void(*)(ProHeader*))</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_pro_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>Test_ACK_Callback(ProHeader*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Test_ACK_Callback(ProHeader*) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_link.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>Test_Pro_Link()</STRONG> (Thumb, 224 bytes, Stack size 88 bytes, dji_pro_link.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_set_encrypt_key_interface(const char*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Send_Interface(ProSendParameter*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3]"></a>nav_force_close_handler(unsigned char, unsigned char*, unsigned short, req_id_t)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nav_force_close_handler(unsigned char, unsigned char*, unsigned short, req_id_t) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_test.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>sdk_std_msgs_handler(unsigned char, unsigned char*, unsigned short, req_id_t)</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sdk_std_msgs_handler(unsigned char, unsigned char*, unsigned short, req_id_t) &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_test.o(.data)
</UL>
<P><STRONG><a name="[126]"></a>basic_test_mode2(bool&)</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = basic_test_mode2(bool&) &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all(bool&)
</UL>

<P><STRONG><a name="[128]"></a>basic_test_mode4(bool&)</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = basic_test_mode4(bool&) &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all(bool&)
</UL>

<P><STRONG><a name="[129]"></a>cmd_callback_test_fun(unsigned short*)</STRONG> (Thumb, 74 bytes, Stack size 312 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = cmd_callback_test_fun(unsigned short*) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_test.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>basic_test_cmd(bool&)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = basic_test_cmd(bool&) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Complex_Send_Cmd(unsigned char, void(*)(unsigned short*))
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
</UL>

<P><STRONG><a name="[12c]"></a>random_test_ack_cmd_callback(ProHeader*)</STRONG> (Thumb, 102 bytes, Stack size 312 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = random_test_ack_cmd_callback(ProHeader*) &rArr; is_sys_error(unsigned short) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sys_error(unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_test.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>random_test_cmd(bool&)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = random_test_cmd(bool&) &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
</UL>

<P><STRONG><a name="[12f]"></a>cmd_callback_fun(unsigned short*)</STRONG> (Thumb, 70 bytes, Stack size 312 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cmd_callback_fun(unsigned short*) &rArr; is_sys_error(unsigned short) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sys_error(unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_test.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>test_all(bool&)</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = test_all(bool&) &rArr; basic_test_mode4(bool&) &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_mode4(bool&)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_mode2(bool&)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Complex_Send_Cmd(unsigned char, void(*)(unsigned short*))
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
</UL>

<P><STRONG><a name="[131]"></a>test_activation_ack_cmd_callback(ProHeader*)</STRONG> (Thumb, 136 bytes, Stack size 416 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = test_activation_ack_cmd_callback(ProHeader*) &rArr; Pro_Config_Comm_Encrypt_Key(const char*) &rArr; sdk_set_encrypt_key_interface(const char*) &rArr; sdk_comm_set_key(SDKFilter*, const char*) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Config_Comm_Encrypt_Key(const char*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sys_error(unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_test.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>test_activation()</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = test_activation() &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Activation()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
</UL>

<P><STRONG><a name="[133]"></a>test_version_query_ack_cmd_callback(ProHeader*)</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test_version_query_ack_cmd_callback(ProHeader*) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_test.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>test_version_query()</STRONG> (Thumb, 586 bytes, Stack size 32 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = test_version_query() &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
</UL>

<P><STRONG><a name="[135]"></a>DJI_cmd_data_callback(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DJI_cmd_data_callback(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Complex_Send_Cmd(unsigned char, void(*)(unsigned short*))
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Landing()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Gohome()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Takeoff()
</UL>

<P><STRONG><a name="[136]"></a>sdk_ack_nav_open_close_callback(ProHeader*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdk_ack_nav_open_close_callback(ProHeader*) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pro_test.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>DJI_ctrl_data_callback(float, float, float, float)</STRONG> (Thumb, 206 bytes, Stack size 104 bytes, dji_pro_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[138]"></a>DJI_ctrl_mode_callback(int)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dji_pro_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1ae]"></a>DJI_simple_task_callback(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_pro_test.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>DJI_query_callback()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, dji_pro_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1af]"></a>DJI_Get_Info(unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dji_pro_test.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>Get_Time()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dji_pro_test.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>spin_callback()</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = spin_callback() &rArr; test_all(bool&) &rArr; basic_test_mode4(bool&) &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_version_query()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_activation()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all(bool&)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test_cmd(bool&)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_cmd(bool&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_mode4(bool&)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_mode2(bool&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Ack(req_id_t, unsigned char*, int)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>DJI_Onboard_API_Takeoff()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DJI_Onboard_API_Takeoff() &rArr; DJI_cmd_data_callback(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_cmd_data_callback(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::takeoff()
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::takeOff(int)
</UL>

<P><STRONG><a name="[86]"></a>DJI_Onboard_API_Landing()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DJI_Onboard_API_Landing() &rArr; DJI_cmd_data_callback(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_cmd_data_callback(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toCVTask()
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::landIn(int)
</UL>

<P><STRONG><a name="[13c]"></a>DJI_Onboard_API_Gohome()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dji_pro_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_cmd_data_callback(unsigned char)
</UL>

<P><STRONG><a name="[90]"></a>DJI_Onboard_API_Control(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = DJI_Onboard_API_Control(unsigned char) &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
</UL>

<P><STRONG><a name="[91]"></a>DJI_Onboard_API_Activation()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dji_pro_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = DJI_Onboard_API_Activation() &rArr; test_activation() &rArr; App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int) &rArr; Pro_Send_Interface(ProSendParameter*) &rArr; sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short) &rArr; sdk_stream_codec(SDKFilter*, SDKHeader*, void(*)(tagAES256Context*, unsigned char*)) &rArr; aes256_init(tagAES256Context*, unsigned char*) &rArr; aes_expandEncKey(unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_activation()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
</UL>

<P><STRONG><a name="[97]"></a>FlightControl::init()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flightcontrol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>FlightControl::set(int, int, int, int)</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, flightcontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FlightControl::set(int, int, int, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::sgn(int)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl()
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::trackBasket(int)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::moveY(int)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::stop(int)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::moveX(int)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::angle(int)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::toHeight(int)
</UL>

<P><STRONG><a name="[13e]"></a>FlightControl::smooth()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flightcontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[87]"></a>FlightControl::takeoff()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, flightcontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlightControl::takeoff() &rArr; DJI_Onboard_API_Takeoff() &rArr; DJI_cmd_data_callback(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Takeoff()
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toCVTask()
</UL>

<P><STRONG><a name="[80]"></a>FlightControl::decode(unsigned char)</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, flightcontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FlightControl::decode(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toCVTask()
</UL>

<P><STRONG><a name="[4]"></a>Logic::takeOff(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Logic::takeOff(int) &rArr; DJI_Onboard_API_Takeoff() &rArr; DJI_cmd_data_callback(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Takeoff()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Logic::toHeight(int)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Logic::toHeight(int) &rArr; FlightControl::set(int, int, int, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::sgn(int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>Logic::offSet()</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, logic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl()
</UL>

<P><STRONG><a name="[e]"></a>Logic::angle(int)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Logic::angle(int) &rArr; FlightControl::set(int, int, int, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::sgn(int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Logic::delay(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 8]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Logic::moveX(int)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Logic::moveX(int) &rArr; FlightControl::set(int, int, int, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::sgn(int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 5]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Logic::stop(int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Logic::stop(int) &rArr; FlightControl::set(int, int, int, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
</UL>
<BR>[Address Reference Count : 9]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Logic::landIn(int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Logic::landIn(int) &rArr; DJI_Onboard_API_Landing() &rArr; DJI_cmd_data_callback(unsigned char) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Landing()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Logic::moveY(int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Logic::moveY(int) &rArr; FlightControl::set(int, int, int, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::sgn(int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Logic::takeBall(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Logic::takeBall(int) &rArr; mechanical::out() &rArr; Servo::setpos(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::out()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Logic::dropBall(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Logic::dropBall(int) &rArr; mechanical::drop(int) &rArr; Servo::setpos(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::drop(int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Logic::moveToCentre(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Logic::moveToCentre(int) &rArr; mechanical::back() &rArr; Servo::setpos(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::back()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Logic::trackBasket(int)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Logic::trackBasket(int) &rArr; FlightControl::set(int, int, int, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::sgn(int)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Logic::stopMove(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Logic::stopMove(int) &rArr; mechanical::stop() &rArr; Servo::setpos(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::stop()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> logic.o(.data)
<LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>TaskList::pollTask()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TaskList::pollTask() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl()
</UL>

<P><STRONG><a name="[85]"></a>TaskList::init()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, logic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toCVTask()
</UL>

<P><STRONG><a name="[140]"></a>RTC_Config</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Config &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[147]"></a>RTC_TimeRegulate</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RTC_TimeRegulate &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>

<P><STRONG><a name="[14a]"></a>rtc_set_time</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rtc_set_time &rArr; RTC_TimeRegulate &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[92]"></a>rtc_init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rtc_init &rArr; rtc_set_time &rArr; RTC_TimeRegulate &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>rtc_get_time</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[9f]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
</UL>

<P><STRONG><a name="[1b1]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>EXTI_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[153]"></a>GPIO_DeInit</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::init()
</UL>

<P><STRONG><a name="[1bb]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::test(unsigned short)
</UL>

<P><STRONG><a name="[1bd]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::init()
</UL>

<P><STRONG><a name="[155]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[141]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[1c5]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>PWR_MainRegulatorModeConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>PWR_OverDriveCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>PWR_OverDriveSWCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>PWR_UnderDriveCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>PWR_EnterUnderDriveSTOPMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>RCC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[157]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1d5]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>RCC_LSEConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[1d7]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>RCC_PLLSAIConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>RCC_PLLSAICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>RCC_MCO1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>RCC_MCO2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[144]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[145]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[1e6]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>RCC_SAIPLLI2SClkDivConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>RCC_SAIPLLSAIClkDivConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>RCC_SAIBlockACLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>RCC_SAIBlockBCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>RCC_LTDCCLKDivConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>RCC_TIMCLKPresConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::init()
</UL>

<P><STRONG><a name="[1ee]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[c8]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
</UL>

<P><STRONG><a name="[154]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[1f0]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[165]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[1f2]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>RCC_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>RCC_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[159]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[158]"></a>RTC_DeInit</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[15a]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
</UL>

<P><STRONG><a name="[14c]"></a>RTC_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[1fb]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>RTC_RefClockCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[1fd]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>RTC_SetTime</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[1fe]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>RTC_GetTime</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
</UL>

<P><STRONG><a name="[1ff]"></a>RTC_GetSubSecond</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>RTC_SetDate</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[200]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>RTC_GetDate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
</UL>

<P><STRONG><a name="[15e]"></a>RTC_SetAlarm</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[201]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>RTC_GetAlarm</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[202]"></a>RTC_AlarmCmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>RTC_AlarmSubSecondConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>RTC_GetAlarmSubSecond</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>RTC_OutputConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[161]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[20c]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>RTC_CalibOutputConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[210]"></a>RTC_GetTimeStampSubSecond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>RTC_TamperCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>RTC_TamperFilterConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>RTC_TamperSamplingFreqConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>RTC_TamperPinsPrechargeDuration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>RTC_TimeStampOnTamperDetectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>RTC_TamperPullUpCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[14b]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[218]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>RTC_SynchroShiftConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[21b]"></a>RTC_ITConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[21d]"></a>RTC_GetITStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>TIM_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[a9]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[21f]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[aa]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[ac]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[ae]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[b0]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[22b]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>TIM_SelectOCxM</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[ad]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[af]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[b1]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[235]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[16c]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[16b]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[169]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[166]"></a>TIM_ICInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[246]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[247]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[24d]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[24f]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[251]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo(TIM_TypeDef*, unsigned char, unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[16f]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[16e]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[170]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[172]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[171]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[173]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[256]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>USART_DeInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[cd]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
</UL>

<P><STRONG><a name="[25c]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>USART_ClockInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
</UL>

<P><STRONG><a name="[25f]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
</UL>

<P><STRONG><a name="[bb]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
</UL>

<P><STRONG><a name="[262]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::print(unsigned char) const
</UL>

<P><STRONG><a name="[26f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*)
</UL>

<P><STRONG><a name="[b9]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
</UL>

<P><STRONG><a name="[ba]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::defaultIRQHandler(USART::usart*)
</UL>

<P><STRONG><a name="[12e]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test_cmd(bool&)
</UL>

<P><STRONG><a name="[270]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::decode(unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Recv_Req_Data(ProHeader*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Data(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, int, void(*)(ProHeader*), int, int)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::smooth()
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_std_msgs_handler(unsigned char, unsigned char*, unsigned short, req_id_t)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_encrypt_interface(unsigned char*, const unsigned char*, unsigned short, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ack_cmd_callback(ProHeader*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Ack(req_id_t, unsigned char*, int)
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::init()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ack_nav_open_close_callback(ProHeader*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_version_query_ack_cmd_callback(ProHeader*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_activation_ack_cmd_callback(ProHeader*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_callback_fun(unsigned short*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test_ack_cmd_callback(ProHeader*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_callback_test_fun(unsigned short*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Pro_Link()
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_update_reuse_part(SDKFilter*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_shift_data(SDKFilter*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_prepare(SDKFilter*, SDKHeader*)
</UL>

<P><STRONG><a name="[272]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[274]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_store_data(SDKFilter*, unsigned char)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_stream_prepare(SDKFilter*, SDKHeader*)
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_ctrl_data_callback(float, float, float, float)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_mode4(bool&)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_mode2(bool&)
</UL>

<P><STRONG><a name="[276]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[113]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_comm_set_key(SDKFilter*, const char*)
</UL>

<P><STRONG><a name="[179]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[7a]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printflt(double) const
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printflt(double) const
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_std_msgs_handler(unsigned char, unsigned char*, unsigned short, req_id_t)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printflt(double) const
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printflt(double) const
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printflt(double) const
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl()
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::trackBasket(int)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::toHeight(int)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_ctrl_mode_callback(int)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_ctrl_data_callback(float, float, float, float)
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_std_msgs_handler(unsigned char, unsigned char*, unsigned short, req_id_t)
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_std_msgs_handler(unsigned char, unsigned char*, unsigned short, req_id_t)
</UL>

<P><STRONG><a name="[277]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[278]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[279]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27a]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[178]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[74]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[27b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[27c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[17e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[27d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[187]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[27e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>FlightControl::sgn(int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flightcontrol.o(i._ZN13FlightControl3sgnEi))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::set(int, int, int, int)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::trackBasket(int)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::moveY(int)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::moveX(int)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::angle(int)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::toHeight(int)
</UL>

<P><STRONG><a name="[84]"></a>USART::usart::operator &lang;&lang;(char*) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i._ZNK5USART5usartlsEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART::usart::operator &lang;&lang;(char*) const &rArr; USART::usart::printstr(char*) const &rArr; USART::usart::printch(char) const &rArr; USART::usart::print(unsigned char) const &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::printstr(char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toCVTask()
</UL>

<P><STRONG><a name="[13f]"></a>std::abs(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logic.o(i._ZSt3absf))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::trackBasket(int)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::angle(int)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::toHeight(int)
</UL>

<P><STRONG><a name="[122]"></a>std::atan2(float, float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dji_pro_test.o(i._ZSt5atan2ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::atan2(float, float) &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_std_msgs_handler(unsigned char, unsigned char*, unsigned short, req_id_t)
</UL>

<P><STRONG><a name="[189]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[280]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[83]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskList::pollTask()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControl::decode(unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Onboard_API_Control(unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Recv_Req_Data(ProHeader*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdRecvThread()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testStateMachine()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toCVTask()
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::trackBasket(int)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::moveX(int)
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::toHeight(int)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic::takeOff(int)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_query_callback()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_ctrl_mode_callback(int)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_ctrl_data_callback(float, float, float, float)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ack_nav_open_close_callback(ProHeader*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_cmd_data_callback(unsigned char)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_version_query()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_version_query_ack_cmd_callback(ProHeader*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_activation()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_activation_ack_cmd_callback(ProHeader*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all(bool&)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_callback_fun(unsigned short*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test_ack_cmd_callback(ProHeader*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_test_cmd(bool&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_callback_test_fun(unsigned short*)
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_force_close_handler(unsigned char, unsigned char*, unsigned short, req_id_t)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ACK_Callback(ProHeader*)
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Link_Recv_Hook(ProHeader*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Send_Interface(ProSendParameter*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Ack_Interface(ProAckParameter*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sys_error(unsigned short)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_ack_cmd_callback(ProHeader*)
</UL>

<P><STRONG><a name="[281]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[282]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[18c]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[13a]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_callback()
</UL>

<P><STRONG><a name="[125]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_std_msgs_handler(unsigned char, unsigned char*, unsigned short, req_id_t)
</UL>

<P><STRONG><a name="[188]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
</UL>

<P><STRONG><a name="[18e]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[191]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[190]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[18d]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[283]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[284]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[285]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[18f]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[df]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[dd]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[18b]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7e]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[79]"></a>__sti___8_main_cpp_DJI</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sti___8_main_cpp_DJI &rArr; USART::usart::usart(USART::usartPort, unsigned, unsigned, USART_InitTypeDef*) &rArr; USART::usart::init(USART::usartPort, USART::Buffer*, USART::Buffer*, unsigned, USART_InitTypeDef*) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::usart::usart(USART::usartPort, unsigned, unsigned, USART_InitTypeDef*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mechanical::mechanical()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[11a]"></a>Send_Pro_Data(unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dji_pro_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Send_Pro_Data(unsigned char*) &rArr; DJI_Pro_Hw::Pro_Hw_Send(unsigned char*, int) &rArr; USART::usart::print(unsigned char) const &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Pro_Hw::Pro_Hw_Send(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Poll()
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Link_Recv_Hook(ProHeader*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Send_Interface(ProSendParameter*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_Ack_Interface(ProAckParameter*)
</UL>

<P><STRONG><a name="[15d]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[15c]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[16a]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[168]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[192]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18a]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[195]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[194]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[76]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
